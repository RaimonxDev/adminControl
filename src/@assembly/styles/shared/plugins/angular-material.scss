// Themes definition file that includes $asm-themes map
@import 'src/themes';

// -----------------------------------------------------------------------------------------------------
// @ Expose an Angular Material theme as css custom properties (not used at the moment)
// -----------------------------------------------------------------------------------------------------
@mixin asm-expose-angular-material-theme($theme) {

    // Group color palettes together
    $color-palettes: (
        primary: map-get($theme, primary),
        accent: map-get($theme, accent),
        warn: map-get($theme, warn)
    );

    // Group background and foreground palettes together
    $bgfg-palettes: (
        background: map-get($theme, background),
        foreground: map-get($theme, foreground)
    );

    // Create an empty map for generated css custom properties
    $custom-properties: ();

    // Handle color palettes
    @each $palette-name, $palette in $color-palettes {
        $custom-properties: map-merge($custom-properties, (--color-#{$palette-name}: map-get($palette, 500)));
        $custom-properties: map-merge($custom-properties, (--color-#{$palette-name}-contrast: map-get($palette, '500-contrast')));
        @each $key, $value in $palette {
            @if ($key != 'contrast') {
                $custom-properties: map-merge($custom-properties, (--color-#{$palette-name}-#{$key}: $value));
            }
        }
    }

    // Handle background and foreground palettes
    @each $palette-name, $palette in $bgfg-palettes {
        @each $key, $value in $palette {
            $custom-properties: map-merge($custom-properties, (--color-#{$palette-name}-#{$key}: $value));
        }
    }

    // Print out the custom properties
    @each $property-name, $property-value in $custom-properties {
        #{$property-name}: $property-value;
    }
}

// -----------------------------------------------------------------------------------------------------
// @ Theming
//   Go through the each defined theme and apply it to whatever content this mixin has
// -----------------------------------------------------------------------------------------------------
@mixin asm-angular-material-theme($encapsulated: true) {

    @each $class-name, $theme in $asm-themes {

        // Adjust the theme and set it as global so it can be accessible from outside
        $theme: asm-adjust-angular-material-theme($theme) !global;

        // If encapsulated...
        @if ($encapsulated == true) {

            // Do everything inside a host context
            :host-context(.#{$class-name}) {
                @content;
            }

        } @else {

            // Do everything inside a body class
            body.#{$class-name} {
                @content;
            }
        }
    }
}
